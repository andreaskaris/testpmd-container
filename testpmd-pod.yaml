apiVersion: v1
kind: Namespace
metadata:
  name: dpdktest
---
apiVersion: sriovnetwork.openshift.io/v1
kind: SriovNetwork
metadata:
  name: vfio-pci-0-ns-dpdktest
  namespace: openshift-sriov-network-operator
spec:
  capabilities: '{ "mac": true, "ips": true }'
  logLevel: info
  networkNamespace: dpdktest
  resourceName: vfio_pci_0
  trust: "on"
---
apiVersion: v1
imagePullSecrets:
- name: default-dockercfg-mmbgz
kind: ServiceAccount
metadata:
  name: dpdktest
  namespace: dpdktest
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:openshift:scc:privileged-to-dpdktest
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:openshift:scc:privileged
subjects:
- kind: ServiceAccount
  name: dpdktest
  namespace: dpdktest
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: testpmd-commands
  namespace: dpdktest
data:
  entrypoint.sh: |
    #!/bin/bash
    
    set -eu

    echo "===================================================="
    echo "Information about current user and privilege status:"
    echo "===================================================="
    capsh --print
    id
    echo "===================================================="
    echo ""
    
    # https://doc.dpdk.org/guides/linux_gsg/linux_eal_parameters.html
    # https://doc.dpdk.org/guides/sample_app_ug/kernel_nic_interface.html
    
    echo "Get PCI_DEVICE_ID from filter expression"
    PCI_DEVICE_FILTER=${PCI_DEVICE_FILTER:-PCIDEVICE_OPENSHIFT_IO}
    PCI_DEVICE_IDS=$(env | grep -E "^$PCI_DEVICE_FILTER" | awk -F '=' '{print $NF}' | sort | head -1 | sed 's/,/ /g')
    PCI_DEVICE_ALLOW_LIST=""
    for pci_device_id in ${PCI_DEVICE_IDS}; do
      PCI_DEVICE_ALLOW_LIST="${PCI_DEVICE_ALLOW_LIST} -a ${pci_device_id}"
    done
    
    PINNED_LCORES=${PINNED_LCORES:-""}
    if [ "$PINNED_LCORES" == "" ]; then
    	echo "Get available CPUs from the Cpus_allowed_list"
    	PINNED_LCORES=$(awk '/Cpus_allowed_list:/ {print $NF}' < /proc/self/status)
    	echo "Pinned lcores will be: ${PINNED_LCORES}"
    else
    	echo "Using PINNED_LCORES '${PINNED_LCORES}' from configuration"
    fi
    
    echo "Running testpmd, showing statistics every 10 seconds:"
    ( while true ; do echo 'show port stats all' ; sleep 10 ; done ) | \
    dpdk-testpmd -l "${PINNED_LCORES}" -n 4 ${PCI_DEVICE_ALLOW_LIST} -- \
        -i --nb-cores=1 --nb-ports=2 --total-num-mbufs=2048 --cmdline-file=/testpmd/commands.txt
    
    echo "FAILURE! If we got here, this means that it's time for troubleshooting. Testpmd did not run or crashed!"
    sleep infinity
  commands.txt: |
    set fwd rxonly
    show port info all
    show port stats all
    start
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fedora-deployment
  namespace: dpdktest
  labels:
    app: fedora-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fedora-pod
  template:
    metadata:
      labels:
        app: fedora-pod
      annotations:
        k8s.v1.cni.cncf.io/networks: |-
          [
            {
              "name": "vfio-pci-0-ns-dpdktest",
              "mac": "20:04:0f:f1:88:01"
            },
            {
              "name": "vfio-pci-0-ns-dpdktest",
              "mac": "20:04:0f:f1:88:02"
            }
          ]
    spec:
      securityContext:
        fsGroup: 2002    # must be set as this sets the group ownership of all volume mounts, including hugepages
        runAsGroup: 2001 # set the group of the container user - need not match fsGroup
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: dpdktest
      containers:
      - name: sample-container
        image: quay.io/akaris/testpmd:latest
        imagePullPolicy: IfNotPresent
        # command: ["sleep", "infinity"]
        command:
        - "/bin/bash"
        - "/testpmd/entrypoint.sh"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            add:
          #    - "CAP_NET_RAW"
          #    - "CAP_NET_ADMIN"
              - "IPC_LOCK"      # required
              - "SYS_RESOURCE"  # required
          privileged: false
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /hugepages-1Gi
          name: hugepage-1gi
        - mountPath: /testpmd
          name: testpmd-commands
        resources:
          limits:
            hugepages-1Gi: 6Gi
            memory: 100Mi
            cpu: "8"
          requests:
            memory: 100Mi
            cpu: "8"
      volumes:
      - name: hugepage-1gi
        emptyDir:
          medium: HugePages-1Gi
      - name: testpmd-commands
        configMap:
          name: testpmd-commands
      runtimeClassName: "performance-sno-pp"  # set this to: oc get runtimeclass
